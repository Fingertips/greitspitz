# NGINX configuration example for setting up cached image transformation.
#
# Start from the project root with:
#   mkdir cache; nginx -p "$(pwd)/examples" -c "$(pwd)/examples/nginx.conf"

# Don't run the background, so it can be terminated with ctrl-c.
daemon off;

# Change level to debug if you need more information.
error_log /dev/stderr warn;

# Boilerplate config for setting up worker processes.
worker_processes auto;
events {
  worker_connections 256;
}

http {
  access_log /dev/stdout;

  # Writes cached responses to disk, allowing 10 million different cache keys, growing to a maximum of 2 gigabytes,
  # pruning unused cached after 7 days.
  proxy_cache_path ../cache levels=1:2 keys_zone=greitspitz:10m max_size=2g inactive=7d use_temp_path=off;

  upstream greitspitz {
    server 127.0.0.1:1090;
  }

  server {
    # We're using port 1080 for testing, the URL becomes something like http://127.0.0.1:1080/avatars/-/small.
    listen 1080 default_server;

    # Cache response from Greitspitz for 7 days.
    proxy_cache greitspitz;
    proxy_cache_lock on;
    proxy_cache_valid 200 7d;

    # Set expiration in response headers to 7 days.
    expires 7d;

    # We're rewriting the URL so we don't expose our internal bucket names on object storage. Our key name is the form
    # of `avaters/key`, this needs to be URI escaped, so / becomes %2F.
    location ~ ^/avatars/(.+)/small {
      proxy_pass http://greitspitz/avatars-production/avatars%2F$1/fit:128,quality:60;
    }
    location ~ ^/avatars/(.+)/large {
      proxy_pass http://greitspitz/avatars-production/avatars%2F$1/fit:640,quality:90;
    }
  }
}
